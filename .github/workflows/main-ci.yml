name: Hugin Cache Main Pipeline

env:
  GITHUB_REGISTRY: 'ghcr.io'
  GITHUB_OWNER: 'kryptokrona'
  GITHUB_DOCKER_IMAGE: 'hugin-cache'

on: 
  push:
    branches:    
      - main
    paths-ignore:
      - '*.md'
      - '.run/**'
      - 'assets/**'
      - '.github/ISSUE_TEMPLATE/**'
      - 'docker-compose.yml'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install
      run: npm install

    - name: Build
      run: npm run build --if-present

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [ build ]
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: hugin_cache_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test1234
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      NODE_ENV: test
      TEST_DATABASE_URL: postgres://postgres:test1234@0.0.0.0:5432/hugin_cache_test

    strategy:
      matrix:
        node-version: [16.x, 18.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install
        run: npm install
        env:
          CI: true

      - name: Unit Test
        run: npm run test
        env:
          CI: true

      - name: Code Coverage
        run: npm run code-coverage
        env:
          CI: true

  build-docker:
    name: Build Docker
    runs-on: ubuntu-latest
    needs: [ test ]

    steps:
    - uses: actions/checkout@v1
    - uses: benjlevesque/short-sha@v1.2

    - name: Log into registry ghcr.io
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}

    - name: Build Docker
      run: |
        docker build -t $GITHUB_REGISTRY/$GITHUB_OWNER/$GITHUB_DOCKER_IMAGE:${{ env.SHA }} .

    - name: Publish Docker
      run: |
        docker push $GITHUB_REGISTRY/$GITHUB_OWNER/$GITHUB_DOCKER_IMAGE:${{ env.SHA }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build-docker

    steps:
    - name: Check out the codebase.
      uses: actions/checkout@v2

    - name: Uses Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: '3.11.0-alpha.1'

    - name: Install Jmespath
      run: pip3 install jmespath

    - name: Run playbook
      uses: dawidd6/action-ansible-playbook@v2
      with:
        playbook: provision_vps.yml
        directory: ./ansible
        key: ${{secrets.ANSIBLE_PRIVATE_KEY}}
        vault_password: ${{secrets.ANSIBLE_VAULT_PASS}}
        options: |
          --inventory hosts.inventory
          --verbose

  smoke-test:
    name: Smoke Test
    runs-on: ubuntu-latest
    needs: [ deploy ]

    steps:
      - uses: actions/checkout@v3
      
      - name: Uses Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: '3.11.0-alpha.1'
        
      - name: Smoke Test  
        run: |
          pip3 install requests
          python3 tests/requests/smoke-test.py

  # rollback:
  #   name: Rollback
  #   runs-on: ubuntu-latest
  #   if: ${{ always() && (needs.smoke-test.result=='failure') }}
  #   workflow_run:
  #     workflows: ["Fork production builds"]
  #     type:
  #     - complete