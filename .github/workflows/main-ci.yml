name: Hugin Cache Main Pipeline

env:
  GITHUB_REGISTRY: 'ghcr.io'
  GITHUB_OWNER: 'kryptokrona'
  GITHUB_DOCKER_IMAGE: 'hugin-cache'

on: 
  push:
    branches:    
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install
      run: npm install

    - name: Build
      run: npm run build --if-present

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [ build ]
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: hugin_cache_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test1234
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      NODE_ENV: test
      TEST_DATABASE_URL: postgres://postgres:test1234@0.0.0.0:5432/hugin_cache_test

    strategy:
      matrix:
        node-version: [16.x, 18.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install
        run: npm install
        env:
          CI: true

      - name: Unit Test
        run: npm run test
        env:
          CI: true

      # Code Coverage

  build-docker:
    name: Build Docker
    runs-on: ubuntu-latest
    needs: [ test ]

    steps:
    - uses: actions/checkout@v1
    - uses: benjlevesque/short-sha@v1.2

    - name: Log into registry ghcr.io
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}

    - name: Build Docker
      run: |
        docker build -t $GITHUB_REGISTRY/$GITHUB_OWNER/$GITHUB_DOCKER_IMAGE:${{ env.SHA }} \
        -t $GITHUB_REGISTRY/$GITHUB_OWNER/$GITHUB_DOCKER_IMAGE:latest .

    - name: Publish Docker
      run: |
        docker push $GITHUB_REGISTRY/$GITHUB_OWNER/$GITHUB_DOCKER_IMAGE:${{ env.SHA }}
        docker push $GITHUB_REGISTRY/$GITHUB_OWNER/$GITHUB_DOCKER_IMAGE:latest

  # Deploy
#  deploy:
#    name: Deploy
#    runs-on: ubuntu-latest
#
#    steps:
#    - name: Check out the codebase.
#      uses: actions/checkout@v2
#
#    - name: Set up Python 3.
#      uses: actions/setup-python@v2
#      with:
#        python-version: '3.x'
#
#    - name: Install Ansible.
#      run: pip3 install ansible-core
#
#    - name: Trigger a new import on Galaxy.
#      run: >-
#        ansible-galaxy role import --api-key ${{ secrets.GALAXY_API_KEY }}
#        $(echo ${{ github.repository }} | cut -d/ -f1) $(echo ${{ github.repository }} | cut -d/ -f2)